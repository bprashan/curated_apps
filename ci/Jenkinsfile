properties([parameters([string(defaultValue: 'sanity', description: 'select the set of pytest to execute', name: 'run', trim: true),
string(description: 'enter the specific pytest to execute', name: 'run_specific_test'),
string(description: 'Provide either Gramine repo branch or tag, by default automation is assigned with v1.3.1 tag', name: 'gramine_commit', trim: true),
string(description: 'If you want to change gsc repo, provide it here', name: 'gsc_repo', trim: true),
string(description: 'If you want to change gsc commit, provide it here', name: 'gsc_commit', trim: true),
string(description: 'If you want to change contrib repo, provide it here', name: 'contrib_repo', trim: true),
string(description: 'If you want to change contrib commit, provide it here', name: 'contrib_branch', trim: true),
string(description: 'If you want to rebase contrib repo, provide it here', name: 'rebase_contrib_repo', trim: true),
string(description: 'If you want to rebase contrib commit, provide it here', name: 'rebase_contrib_branch', trim: true),
string(defaultValue: 'graphene_dcap_server', description: '''graphene_dcap_server [attestation test]
graphene_dcap [attestation test]
gramineval2 [azure 20.04 vm]
graphene_wcity_02 [non attestation test]''', name: 'nodeLabel')])])

node("$nodeLabel") {
    env.TERM="linux"
    checkout scm
    test_executor = load 'ci/libs/utils.pipeline'

    try {
        test_executor.initialize()
        test_executor.runtest()
    } catch (Exception e){
        currentBuild.result = "FAILURE"
    } finally {
        try {
            test_executor.storeartifacts()
        } finally {
            test_executor.cleanup()
        }
    }
}